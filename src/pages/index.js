import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import Banner from '@/components/banner'
import Card from '@/components/card'
import { useContext, useEffect, useState } from 'react'

import useTrackLocation from '@/hooks/useTrackLocation'
import { fetchCoffeeStores } from '@/services/services.index'
import { ACTION_TYPES, StoreContext } from '@/store/store-context'


export async function getStaticProps(context) {
 
  const storesData = await fetchCoffeeStores();
  return {
      props: {
        coffeeStores: storesData,
      }, // will be passed to the page component as props
  }
};

export default function Home(props) {

  const { handleTrackLocation, locationErrorMsg, findingLocation } = useTrackLocation();
  const { dispatch, state } = useContext(StoreContext);
  const { coffeeStores, latLong } = state;  // retrieve it from StoreContext
  
  const [locating, setLocating] = useState(false);
  const [coffeeStoresError, setCoffeeStoresError] = useState(null);

  useEffect(()=> {
    async function setCoffeStoresByLocation(geoCoordinates) {
      if(latLong) {
        try {
          setLocating(true)
          // fetch coffeeStoreByLocation api on client side
          const response = await fetch(
            `/api/getCoffeeStoresByLocation?latLong=${geoCoordinates}&limit=12`
          );
          const storesData = await response.json();
          // store coffeeStores Data in StoreContext
          dispatch({
            type: ACTION_TYPES.SET_COFFEE_STORES,
            payload: {coffeeStores: storesData}
          })
          setCoffeeStoresError("")
        
        } catch (error) {
          console.log({error})
          setCoffeeStoresError(error.message)
        } finally {
          setLocating(false);
        }
      }
    }
    setCoffeStoresByLocation(latLong);
  }, [latLong, dispatch]);
  
  function handleBannerBtnClick () {
    handleTrackLocation();
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Coffee Connaisseur</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Banner 
          buttonText={findingLocation || locating ? "Locating..." : "View stores nearby"}
          handleOnClick={handleBannerBtnClick}
        />
        {locationErrorMsg && <b>{`Something went wrong: ${locationErrorMsg}`}</b>}
        {coffeeStoresError && <b>{`Something went wrong: ${coffeeStoresError}`}</b>}
        
        <div className={styles.heroImage} >
          <Image src="/static/hero-image.png" className={styles.heroImg}
            width={1000} 
            height={400} 
            alt="portal-image"
            priority
          />
        </div>

        {coffeeStores.length > 0 && 
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>Stores near me</h2>
            <div className={styles.cardLayout} >
              {coffeeStores.map(store => (
                <Card 
                  className= {styles.card}
                  key={store.id}
                  name={store.name} 
                  imgUrl={store.imgUrl}
                  href={`/coffee-store/${store.id}`}
                />
              ))}
            </div>
          </div>
        } 

        {props.coffeeStores.length > 0 && 
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>Paris Coffee Shop</h2>
            <div className={styles.cardLayout} >
              {props.coffeeStores.map(store => (
                <Card 
                  className= {styles.card}
                  key={store.id}
                  name={store.name} 
                  imgUrl={store.imgUrl}
                  href={`/coffee-store/${store.id}`}
                />
              ))}
            </div>
          </div>
        }                  
      </main>
    </div>
  )
};